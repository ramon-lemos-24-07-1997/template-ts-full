#!/usr/bin/env node
require('dotenv').config()
// Importa o módulo de shutdown gracioso
const gracefulShutdown = require('http-graceful-shutdown');
// Importa o cliente RabbitMQ, se não for necessário, você pode remover esta linha
require('../src/infra/rabbitmq/rabbit');

// Importa o cliente Redis, se não for necessário, você pode remover esta linha
require('../src/infra/redis/redis');


// Para depuração, você pode descomentar a linha abaixo para ver os logs do servidor
// try {
//   var app = require('../src/app');
//   console.log('App carregado com sucesso');
// } catch (error) {
//   console.log('Erro ao carregar o app:', error);
// }
/**
 * Module dependencies.
 */
const app = require("../src/app");
const debug = require("debug")("backend:server");
const http = require("http");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
gracefulShutdown(server);
// Para depuração, você pode descomentar a linha abaixo para ver os logs do servidor
// try {
//   const { startSocketServer } = require("../src/infra/socket/socket");
//   startSocketServer(server);
// } catch (error) {
//   console.log('Erro ao carregar socket:', error);
// }

// Importa e inicia o servidor Socket.IO
const { startSocketServer } = require("../src/infra/socket/socket");
startSocketServer(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
